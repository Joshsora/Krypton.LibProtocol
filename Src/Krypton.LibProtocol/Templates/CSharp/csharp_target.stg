type_reference_builder(typeref) ::= <<
<(typeref.TemplateAlias)(typeref)>
>>

primitive_type_reference(typeref) ::= <<
<typeref.CamelCaseName>Type
>>

generic_primitive_type_reference(typeref) ::= <<
<typeref.CamelCaseName>Type\<<typeref.Generics:type_reference_builder(); separator=",">\>
>>

declared_type_reference(typeref) ::= <<
<typeref.CamelCaseName>
>>

declared_generic_type_reference(typeref) ::= <<
<typeref.CamelCaseName>\<<typeref.Generics:type_reference_builder(); separator=",">\>
>>

local_type_reference(typeref) ::= <<
<typeref.CamelCaseName>
>>

local_generic_type_reference(typeref) ::= <<
<typeref.CamelCaseName>\<<typeref.Generics:type_reference_builder(); separator=",">\>
>>

generic_attribute_reference(typeref) ::= <<
<typeref.Name>
>>

type_name_builder(typename) ::= <<
<typename.CamelCaseName><if(typename.HasGenerics)>\<<typename.Generics; separator=",">\><endif>
>>

type_constraints_builder(typename) ::= <<
<typename.Generics:{generic | where <generic>: KryptonType\<<generic>\>, new()}; separator="\n">
>>

type_member_declaration(member) ::= <<
public <type_reference_builder(member.Type)> <member.CamelCaseName> { get; set; }
>>

type_member_init(member) ::= <<
<member.CamelCaseName> = <if(member.Type.Attribute)>KryptonType\<<member.Type.Name>\><else><type_reference_builder(member.Type)><endif>.Create();
>>

data_operation_consume(operation) ::= <<
<operation.CamelCaseName>.Consume(br);
>>

if_operation_consume(operation) ::= <<
>>

data_operation_write(operation) ::= <<
<operation.CamelCaseName>.Write(bw);
>>

if_operation_write(operation) ::= <<
>>

type_consume_operation(operation) ::= <<
<(operation.ConsumeAlias)(operation)>
>>
  
type_write_operation(operation) ::= <<
<(operation.WriteAlias)(operation)>
>>

type_declaration(type) ::= <<
public class <type_name_builder(type.Name)> : KryptonType \<<type_name_builder(type.Name)>\> 
<type_constraints_builder(type.Name)>
{
    <type.Members:type_member_declaration(); separator="\n">
 
    public <type.Name.CamelCaseName>()
    {
        <type.Members:type_member_init(); separator="\n">
    }
    
    public override void Consume(BufferReader br)
    {
        <type.Operations:type_consume_operation(); separator="\n">
    }
    
    public override void Write(BufferWriter bw)
    {
        <type.Operations:type_write_operation(); separator="\n">
    }
}
>>

library_declaration(library) ::= <<
namespace <library.Namespace> {

    <library.Types:type_declaration(); separator="\n\n">
}
>>

protocol_declaration(protocol) ::= <<
namespace <protocol.Namespace> {
    
    public class 

}

>>